# streamlit_dashboard_anova.py
import streamlit as st
import pandas as pd
import statsmodels.api as sm
from statsmodels.formula.api import ols
from scipy.stats import shapiro, levene, kruskal, anderson
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np  # Adicionado para lidar com potenciais issues num√©ricas


# --- Fun√ß√µes de An√°lise (Adaptadas do script anterior) ---

@st.cache_data  # Cache para otimizar o carregamento de dados
def load_data():
    """Carrega o Ames Housing Dataset de uma URL e faz uma limpeza b√°sica."""
    urls_tentativas = [
        "https://raw.githubusercontent.com/Viniciusalgueiro/Ameshousing/refs/heads/main/AmesHousing.csv"
    ]
    df = None
    url_carregada = ""
    for url in urls_tentativas:
        try:
            df = pd.read_csv(url)
            url_carregada = url
            break
        except Exception:
            continue  # Tenta a pr√≥xima URL

    if df is None:
        st.error("N√£o foi poss√≠vel carregar o dataset de nenhuma das URLs conhecidas.")
        return None, None, [], []

    st.success(f"Dataset carregado com sucesso de: {url_carregada}")
    df.columns = df.columns.str.replace('[^A-Za-z0-9_]+', '', regex=True).str.lower()

    coluna_preco_nome = None
    if 'saleprice' in df.columns:
        coluna_preco_nome = 'saleprice'
    elif 'sale_price' in df.columns:
        df.rename(columns={'sale_price': 'saleprice'}, inplace=True)
        coluna_preco_nome = 'saleprice'
    # Adicionar mais heur√≠sticas se necess√°rio

    if coluna_preco_nome:
        df[coluna_preco_nome] = pd.to_numeric(df[coluna_preco_nome], errors='coerce')
        df.dropna(subset=[coluna_preco_nome], inplace=True)

    colunas_categoricas_potenciais = df.select_dtypes(include=['object']).columns.tolist()
    colunas_numericas_discretas = [col for col in df.select_dtypes(include=np.number).columns
                                   if df[col].nunique() < 20 and col != coluna_preco_nome]  # Exemplo de heur√≠stica
    colunas_categoricas_potenciais.extend(colunas_numericas_discretas)

    # Remover duplicatas e garantir que a coluna de pre√ßo n√£o est√° na lista
    colunas_categoricas_potenciais = sorted(
        list(set(col for col in colunas_categoricas_potenciais if col != coluna_preco_nome)))

    return df, coluna_preco_nome, colunas_categoricas_potenciais, df.columns.tolist()


def perform_anova_for_variable(df_analysis, var_cat, col_preco):
    """Executa ANOVA e testes de pressupostos para uma vari√°vel."""
    results = {"var_cat": var_cat, "plots": {}}

    df_var = df_analysis[[var_cat, col_preco]].copy()

    # Converter para categoria se n√£o for e garantir que tem pelo menos 2 n√≠veis
    if df_var[var_cat].dtype != 'object' and not pd.api.types.is_categorical_dtype(df_var[var_cat]):
        df_var[var_cat] = df_var[var_cat].astype('category')

    df_var.dropna(inplace=True)  # Remove NaNs especificamente para este par

    if df_var[var_cat].nunique() < 2 or len(df_var) < 10:  # M√≠nimo de observa√ß√µes e n√≠veis
        results["error"] = "Dados insuficientes ou poucos n√≠veis para an√°lise ap√≥s limpeza."
        return results

    formula = f'{col_preco} ~ C({var_cat})'
    try:
        modelo = ols(formula, data=df_var).fit()
        results["anova_table"] = sm.stats.anova_lm(modelo, typ=2)

        p_valor_anova = None
        if f'C({var_cat})' in results["anova_table"].index:
            p_valor_anova = results["anova_table"].loc[f'C({var_cat})', 'PR(>F)']
        elif not results["anova_table"].empty:
            p_valor_anova = results["anova_table"]['PR(>F)'].iloc[0]
        results["p_valor_anova"] = p_valor_anova

        residuos = modelo.resid
        results["residuos_count"] = len(residuos)

        # 1. Normalidade dos res√≠duos
        normalidade_ok = False
        if len(residuos) >= 3:
            if len(residuos) <= 5000:
                stat_shapiro, p_shapiro = shapiro(residuos)
                results["shapiro_test"] = (stat_shapiro, p_shapiro)
                if p_shapiro >= 0.05: normalidade_ok = True
            else:
                ad_result = anderson(residuos)
                results["anderson_test"] = ad_result
                # Verifica se a estat√≠stica √© menor que o valor cr√≠tico para 5%
                sig_level_idx = ad_result.significance_level.tolist().index(5.0)
                if ad_result.statistic < ad_result.critical_values[sig_level_idx]:
                    normalidade_ok = True
        results["normalidade_ok"] = normalidade_ok

        # Plots de Normalidade
        fig_norm, ax_norm = plt.subplots(1, 2, figsize=(10, 4))
        if len(residuos) > 1:
            sns.histplot(residuos, kde=True, ax=ax_norm[0], stat="density", bins=30)
            ax_norm[0].set_title(f'Histograma Res√≠duos ({var_cat})', fontsize=10)
            sm.qqplot(residuos, line='s', ax=ax_norm[1], markerfacecolor="skyblue", markeredgecolor="dodgerblue",
                      alpha=0.7)
            ax_norm[1].set_title(f'Q-Q Plot Res√≠duos ({var_cat})', fontsize=10)
        else:
            ax_norm[0].text(0.5, 0.5, "Poucos dados", ha='center', va='center')
            ax_norm[1].text(0.5, 0.5, "Poucos dados", ha='center', va='center')
        plt.tight_layout()
        results["plots"]["normalidade"] = fig_norm

        # 2. Homocedasticidade (Teste de Levene)
        homocedasticidade_ok = False
        grupos = [df_var[col_preco][df_var[var_cat] == categoria].dropna() for categoria in df_var[var_cat].unique()]
        grupos_validos = [g for g in grupos if len(g) >= 2]  # Levene precisa de grupos com pelo menos 2 obs
        if len(grupos_validos) >= 2:
            stat_levene, p_levene = levene(*grupos_validos)
            results["levene_test"] = (stat_levene, p_levene)
            if p_levene >= 0.05: homocedasticidade_ok = True
        results["homocedasticidade_ok"] = homocedasticidade_ok

        # 3. Kruskal-Wallis (se necess√°rio)
        if not normalidade_ok or not homocedasticidade_ok:
            if len(grupos_validos) >= 2:
                stat_kruskal, p_kruskal = kruskal(*grupos_validos)
                results["kruskal_test"] = (stat_kruskal, p_kruskal)

        # Boxplot
        fig_box, ax_box = plt.subplots(figsize=(10, 5))
        unique_cats = df_var[var_cat].nunique()
        order_boxplot = None
        if unique_cats > 5 and unique_cats < 50:  # Evitar ordenar muitas categorias
            try:
                order_boxplot = df_var.groupby(var_cat)[col_preco].median().sort_values().index
            except Exception:
                order_boxplot = df_var[var_cat].unique()  # Fallback

        sns.boxplot(x=var_cat, y=col_preco, data=df_var, order=order_boxplot, ax=ax_box, palette="viridis")
        ax_box.set_title(f'Distribui√ß√£o de {col_preco} por {var_cat}', fontsize=12)
        if unique_cats > 10:
            plt.setp(ax_box.get_xticklabels(), rotation=45, ha='right', fontsize=8)
        else:
            plt.setp(ax_box.get_xticklabels(), fontsize=9)

        plt.tight_layout()
        results["plots"]["boxplot"] = fig_box

    except Exception as e:
        results["error"] = str(e)
    return results


# --- Interface do Streamlit ---
st.set_page_config(layout="wide", page_title="Dashboard de An√°lise Imobili√°ria ANOVA")

st.title("üè† Dashboard de An√°lise Imobili√°ria com ANOVA")
st.markdown("""
Esta ferramenta interativa permite realizar An√°lises de Vari√¢ncia (ANOVA) no Ames Housing Dataset
para investigar como diferentes caracter√≠sticas categ√≥ricas impactam o pre√ßo de venda dos im√≥veis.
""")

# Carregar Dados
df, coluna_preco, colunas_categoricas_selecionaveis, todas_colunas = load_data()

if df is not None and coluna_preco is not None:
    st.header("1. Vis√£o Geral dos Dados")
    if st.checkbox("Mostrar amostra dos dados"):
        st.dataframe(df.head())
    st.write(f"Total de registros carregados (ap√≥s limpeza inicial na coluna '{coluna_preco}'): {len(df)}")
    st.write(f"Coluna alvo (pre√ßo): `{coluna_preco}`")

    st.sidebar.header("‚öôÔ∏è Configura√ß√µes da An√°lise")
    # Sele√ß√£o de vari√°veis
    variaveis_selecionadas = st.sidebar.multiselect(
        "Escolha 1 a 3 vari√°veis categ√≥ricas para an√°lise ANOVA:",
        options=colunas_categoricas_selecionaveis,
        max_selections=3
    )

    if variaveis_selecionadas:
        st.header("2. Resultados da An√°lise ANOVA")
        st.markdown(f"Analisando o impacto de **{', '.join(variaveis_selecionadas)}** sobre **{coluna_preco}**.")

        for var_analisada in variaveis_selecionadas:
            st.subheader(f"An√°lise para: `{var_analisada}`")

            # Prepara dados espec√≠ficos para a vari√°vel (remove NaNs apenas para as colunas envolvidas)
            df_analise_var = df[[var_analisada, coluna_preco]].copy()
            df_analise_var.dropna(subset=[var_analisada, coluna_preco], inplace=True)

            if df_analise_var.empty or df_analise_var[var_analisada].nunique() < 2:
                st.warning(f"N√£o h√° dados suficientes ou n√≠veis para '{var_analisada}' ap√≥s limpeza. Pulando.")
                continue

            resultados_var = perform_anova_for_variable(df_analise_var, var_analisada, coluna_preco)

            if "error" in resultados_var:
                st.error(f"Erro ao analisar '{var_analisada}': {resultados_var['error']}")
                continue

            # Exibir Tabela ANOVA
            if "anova_table" in resultados_var:
                st.markdown("**Tabela ANOVA:**")
                st.dataframe(resultados_var["anova_table"])
                p_anova = resultados_var.get("p_valor_anova")
                if p_anova is not None:
                    if p_anova < 0.05:
                        st.success(
                            f"‚úÖ ANOVA: H√° uma diferen√ßa estatisticamente significativa nos pre√ßos (p-valor: {p_anova:.4e}).")
                    else:
                        st.info(
                            f"‚ÑπÔ∏è ANOVA: N√£o h√° uma diferen√ßa estatisticamente significativa nos pre√ßos (p-valor: {p_anova:.4e}).")

            # Pressupostos e Testes Alternativos
            with st.expander("Verificar Pressupostos da ANOVA e Testes Alternativos"):
                st.markdown("**Normalidade dos Res√≠duos:**")
                if "shapiro_test" in resultados_var:
                    stat, p_val = resultados_var["shapiro_test"]
                    st.write(f"Shapiro-Wilk: Estat√≠stica={stat:.4f}, P-valor={p_val:.4e}")
                elif "anderson_test" in resultados_var:
                    ad_res = resultados_var["anderson_test"]
                    st.write(f"Anderson-Darling: Estat√≠stica={ad_res.statistic:.4f}")
                    # st.write(f"  Valores Cr√≠ticos: {ad_res.critical_values}")
                    # st.write(f"  N√≠veis de Signific√¢ncia: {ad_res.significance_level}")

                if resultados_var.get("normalidade_ok"):
                    st.success("‚úÖ Res√≠duos parecem ser normalmente distribu√≠dos.")
                else:
                    st.warning("‚ö†Ô∏è Res√≠duos N√ÉO parecem ser normalmente distribu√≠dos.")

                if "normalidade" in resultados_var["plots"]:
                    st.pyplot(resultados_var["plots"]["normalidade"])

                st.markdown("**Homogeneidade das Vari√¢ncias (Homocedasticidade):**")
                if "levene_test" in resultados_var:
                    stat_l, p_l = resultados_var["levene_test"]
                    st.write(f"Teste de Levene: Estat√≠stica={stat_l:.4f}, P-valor={p_l:.4e}")
                    if resultados_var.get("homocedasticidade_ok"):
                        st.success("‚úÖ Vari√¢ncias parecem ser homog√™neas.")
                    else:
                        st.warning("‚ö†Ô∏è Vari√¢ncias N√ÉO parecem ser homog√™neas.")
                else:
                    st.write("Teste de Levene n√£o p√¥de ser realizado (dados insuficientes).")

                if "kruskal_test" in resultados_var:
                    st.markdown("**Teste de Kruskal-Wallis (Alternativa N√£o Param√©trica):**")
                    stat_k, p_k = resultados_var["kruskal_test"]
                    st.write(f"Kruskal-Wallis: Estat√≠stica={stat_k:.4f}, P-valor={p_k:.4e}")
                    if p_k < 0.05:
                        st.success(f"‚úÖ Kruskal-Wallis: Diferen√ßa significativa nas medianas dos pre√ßos.")
                    else:
                        st.info(f"‚ÑπÔ∏è Kruskal-Wallis: Sem diferen√ßa significativa nas medianas dos pre√ßos.")

            # Boxplot
            if "boxplot" in resultados_var["plots"]:
                st.markdown("**Distribui√ß√£o de Pre√ßos por Categoria:**")
                st.pyplot(resultados_var["plots"]["boxplot"])

            st.markdown("---")  # Separador entre vari√°veis

    elif not variaveis_selecionadas and st.sidebar.button("Analisar", type="primary",
                                                          help="Clique para iniciar ap√≥s selecionar as vari√°veis.",
                                                          use_container_width=True, disabled=True):
        # Bot√£o fica desabilitado at√© selecionar algo, apenas para feedback visual
        pass

    st.sidebar.markdown("---")
    st.sidebar.markdown("Desenvolvido como parte de uma an√°lise de dados imobili√°rios.")

elif df is None and coluna_preco is None:  # Falha no carregamento
    st.warning("Aguardando carregamento dos dados ou verifique os erros acima.")
else:  # Carregou mas n√£o achou coluna de pre√ßo ou n√£o h√° categ√≥ricas
    if coluna_preco is None:
        st.error(
            f"A coluna de pre√ßo de venda ('saleprice' ou similar) n√£o foi encontrada no dataset. Verifique as colunas dispon√≠veis: {todas_colunas}")
    if not colunas_categoricas_selecionaveis:
        st.error("Nenhuma coluna categ√≥rica adequada para an√°lise foi identificada.")

# No final do script Streamlit, ap√≥s o loop de an√°lise das vari√°veis

if variaveis_selecionadas: # Somente mostrar se alguma an√°lise foi feita
    st.header("3. Insights Gerais e Recomenda√ß√µes")
    with st.expander("Ver An√°lise Detalhada e Recomenda√ß√µes"):
        st.markdown("""
        ### Como Interpretar os Resultados para Tomada de Decis√£o:

        A an√°lise ANOVA nos ajuda a entender se uma caracter√≠stica espec√≠fica da casa (como estilo da casa,
        ano da venda, ou estilo do telhado) tem uma associa√ß√£o estatisticamente significativa com o pre√ßo
        m√©dio de venda.

        **Para as vari√°veis analisadas (`HouseStyle`, `YrSold`, `RoofStyle`):**

        #### `HouseStyle` (Estilo da Moradia):
        * **Impacto Geral:** Geralmente significativo. Estilos diferentes (T√©rrea, Dois Andares, N√≠veis Divididos)
            atraem diferentes compradores e t√™m diferentes custos e √°reas constru√≠das.
        * **Orienta√ß√£o para Corretores:** Utilize o estilo para segmentar o marketing e justificar faixas de pre√ßo.
        * **Orienta√ß√£o para Investidores:** Analise a popularidade e o potencial de valoriza√ß√£o de diferentes estilos
            na sua √°rea de interesse.

        #### `YrSold` (Ano da Venda):
        * **Impacto Geral:** Pode ser significativo se o mercado passou por mudan√ßas (altas ou baixas) durante
            os anos analisados (ex: 2006-2010). Reflete tend√™ncias macroecon√¥micas.
        * **Orienta√ß√£o para Corretores:** Fornece contexto hist√≥rico para a precifica√ß√£o atual e ajuda a gerenciar
            expectativas.
        * **Orienta√ß√£o para Investidores:** Sublinha a import√¢ncia de entender os ciclos de mercado, embora os dados
            hist√≥ricos de `YrSold` n√£o prevejam o futuro diretamente.

        #### `RoofStyle` (Estilo do Telhado):
        * **Impacto Geral:** Pode ser significativo. Certos estilos (ex: Quatro √Åguas vs. Duas √Åguas) podem estar
            associados a diferentes n√≠veis de custo, durabilidade e est√©tica.
        * **Orienta√ß√£o para Corretores:** Um detalhe que pode agregar valor, especialmente se o telhado for novo
            ou de um estilo particularmente desej√°vel ou dur√°vel.
        * **Orienta√ß√£o para Investidores:** O custo de manuten√ß√£o e substitui√ß√£o pode variar com o estilo do telhado.
            A condi√ß√£o do telhado √© mais cr√≠tica que o estilo em si, mas o estilo influencia o custo.

        **Recomenda√ß√µes Gerais:**
        * **Corretores:** Usem esses insights para refinar suas estrat√©gias de precifica√ß√£o, marketing e aconselhamento
            aos clientes. Uma casa n√£o √© apenas um conjunto de quartos, mas um conjunto de caracter√≠sticas que, juntas,
            determinam seu valor.
        * **Investidores:** Considerem como essas caracter√≠sticas (e outras) se alinham com seus objetivos de
            investimento, seja para renda, "flipping" ou valoriza√ß√£o a longo prazo. Focar em caracter√≠sticas
            que t√™m um impacto positivo e duradouro no valor √© fundamental.

        *Lembre-se que a ANOVA univariada mostra a rela√ß√£o de uma vari√°vel por vez com o pre√ßo.
        Para uma an√°lise mais completa do impacto combinado de m√∫ltiplas vari√°veis, a Regress√£o Linear (Parte II da sua tarefa original) seria o pr√≥ximo passo.*
        """)
